trigger:
 - 'feature-ms-DiegoConos-mensaje'
jobs:
  - job: Job1
    displayName: 'Job Cloud'
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Gradle@3
      inputs:
        gradleWrapperFile: 'gradlew'
        tasks: 'build jacocoTestReport jacocoTestCoverageVerification'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        sonarQubeRunAnalysis: false
        spotBugsAnalysis: false
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'JaCoCo'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/build/reports/jacoco/test/jacocoTestReport.xml'
        pathToSources: '$(System.DefaultWorkingDirectory)/src/main/java/'
        reportDirectory: '$(System.DefaultWorkingDirectory)/build/reports/jacoco/test'
        failIfCoverageEmpty: true
      displayName: 'Cobertura Codigo'  

    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'sonar pipeline'
        organization: 'diegocean'
        projectKey: 'Diegocean_microservicio-spring'
        projectName: 'microservicio-spring'
        extraProperties: |
          sonar.qualitygate.wait=true

    - task: Gradle@3
      inputs:
        gradleWrapperFile: 'gradlew'
        tasks: 'sonarqube'
        publishJUnitResults: false
        javaHomeOption: 'JDKVersion'
        sonarQubeRunAnalysis: true
        sqGradlePluginVersionChoice: 'specify'
        sonarQubeGradlePluginVersion: '3.5.0.2730'
        spotBugsAnalysis: false

    - task: Docker@2
      inputs:
        containerRegistry: 'Docker'
        repository: 'diegocean/microservicio-spring'
        command: 'login'

    - task: Docker@2
      inputs:
        containerRegistry: 'Docker'
        repository: 'diegocean/microservicio-spring'
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: |
                  $(Build.BuildId)
                  latest

    - task: Docker@2
      inputs:
        containerRegistry: 'Docker'
        repository: 'diegocean/microservicio-spring'
        command: 'push'
        tags: |
                  $(Build.BuildId)
                  latest

  - job: Job2
    dependsOn: Job1
    displayName: 'Job local'
    pool:
       name: kubernetes
    steps:

    - task: Kubernetes@1
      inputs:
        connectionType: 'None'
        command: 'apply'
        arguments: '--force -f deployment.yaml'

    - task: PowerShell@2
      inputs:
       targetType: 'inline'
       script: 'Start-Job -ScriptBlock {kubectl port-forward deployment/lab-deployment 8080:8080};'
      displayName: 'Port forward'
    - task: CmdLine@2
      inputs:
          script: |
              jmeter -n -t test.jmx -l resultados.jtl
      displayName: 'JMeter'
